// Generated by CoffeeScript 1.6.2
(function() {
  var $, log, reverse_scroll,
    __slice = [].slice;

  log = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log.apply(console, args);
    }
  };

  $ = jQuery;

  log('behaviour: reverse-scroll initialized');

  reverse_scroll = {
    _neartop: function() {
      return this.options.binder.scrollTop() <= 0;
    },
    scroll_reverse: function() {
      var s,
        _this = this;

      s = this.options.state;
      if (s.isDuringAjax || s.isInvalidPage || s.isDone || s.isDestroyed || s.isPaused) {
        return;
      }
      if (!this.loadingsetup) {
        this.loadingsetup = true;
        this.options.loading.start = function() {
          console.group('loading');
          return _this.beginAjax(_this.options);
        };
        this.options.loading.finished = function() {
          return console.groupEnd();
        };
      }
      if (!this._neartop()) {
        return;
      }
      return this.retrieve();
    },
    _loadcallback_reverse: function(box, data, url) {
      var $curr_top, callback, children, content, frag, opts, prev_height, result;

      opts = this.options;
      callback = opts.callback;
      result = opts.state.isDone ? 'done' : opts.appendCallback ? 'append' : 'no-append';
      log('operation: ', result);
      switch (result) {
        case 'done':
          this._showdonemsg();
          break;
        case 'no-append':
          if (opts.dataType === 'html') {
            data = $("<div>" + data + "</div>").find(opts.itemSelector);
          }
          break;
        case 'append':
          children = box.children();
          if (children.length === 0) {
            return this._error('end');
          }
          log('box', box, children);
          frag = document.createDocumentFragment();
          while (box[0].firstChild) {
            frag.appendChild(box[0].firstChild);
          }
          content = $(opts.contentSelector)[0];
          $curr_top = $(content).children().first();
          $(content).prepend(frag);
          data = children.get();
      }
      opts.loading.finished.call(content, opts);
      if (opts.appendCallback) {
        prev_height = 0;
        $curr_top.prevAll().each(function() {
          return prev_height += $(this).outerHeight(true);
        });
        $("html, body").scrollTop(prev_height);
      }
      opts.state.isDuringAjax = false;
      callback(this, data, url);
      if (opts.prefill) {
        return this._prefill();
      }
    }
  };

  $.extend($.infinitescroll.prototype, reverse_scroll);

}).call(this);
